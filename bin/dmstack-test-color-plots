#!/usr/bin/env python

import numpy as np
import hickory
import fitsio
import esutil as eu
from dmstack_test.util import Namer

MODELS = [
    'bdf',
    'dev',
    'exp',
]


def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--flist', nargs='+', required=True)
    parser.add_argument('--output', required=True)
    return parser.parse_args()


def calc_color_fracdiff(*, truth, data, model, fdiff_struct):

    n = Namer(front=model)

    # only one color for now

    flux = data[n('flux')]
    cov = data[n('flux_cov')]
    assert flux.shape[1] == 2, 'one color for now'

    w, = np.where(
        (data[n('flags')] == 0) &
        np.isfinite(flux[:, 0]) &
        np.isfinite(flux[:, 1])
    )

    true_rmi = truth['true_rmi']

    fac = 2.5/np.log(10)
    rmi_var = fac**2 * (
        cov[w, 0, 0] / flux[w, 0]**2 +
        cov[w, 1, 1] / flux[w, 1]**2 -
        2 * cov[w, 0, 1] / (flux[w, 0] * flux[w, 1])
    )
    rmi_errors = np.sqrt(rmi_var)

    rmi = data[n('mag')][w, 0] - data[n('mag')][w, 1]

    rmi_mean, rmi_sig, rmi_err, ind = eu.stat.sigma_clip(
        rmi, get_indices=True, get_err=True,
    )
    fdiff_struct[n('color_fracdiff')] = rmi_mean/true_rmi - 1
    fdiff_struct[n('color_fracdiff_err')] = rmi_err/true_rmi

    predicted_err = rmi_errors[ind].mean()
    fdiff_struct[n('color_err_fracdiff')] = predicted_err / rmi_sig - 1

    fdiff_struct[n('s2n')] = data[n('s2n')][w[ind]].mean()


def calc_flux_fracdiff(*, truth, data, model, fdiff_struct, band=0):
    """
    we always just do the first band
    """

    n = Namer(front=model)

    band_name = truth['bands'][0, band]

    true_mag = truth['true_%smag' % band_name][0]
    true_flux = 10.0**((true_mag - 30)/(-2.5))

    fluxes = data[n('flux')][:, band]
    flux_errs = data[n('flux_err')][:, band]

    n = Namer(front=model)
    w, = np.where(
        (data[n('flags')] == 0) &
        np.isfinite(fluxes)
    )

    flux_mean, flux_sig, flux_err, ind = eu.stat.sigma_clip(
        fluxes[w], get_indices=True, get_err=True,
    )
    fdiff_struct[n('flux_fracdiff')] = flux_mean/true_flux - 1
    fdiff_struct[n('flux_fracdiff_err')] = flux_err/true_flux

    predicted_err = flux_errs[w[ind]].mean()
    fdiff_struct[n('flux_err_fracdiff')] = predicted_err / flux_sig - 1


def make_fracdiff_struct(data):
    dt = []

    for model in MODELS:
        n = Namer(front=model)
        if n('flags') in data.dtype.names:
            dt += [
                (n('s2n'), 'f8'),
                (n('color_fracdiff'), 'f8'),
                (n('color_fracdiff_err'), 'f8'),
                (n('color_err_fracdiff'), 'f8'),

                (n('flux_fracdiff'), 'f8'),
                (n('flux_fracdiff_err'), 'f8'),
                (n('flux_err_fracdiff'), 'f8'),
            ]

    return np.zeros(1, dtype=dt)


def get_fracdiff(*, truth, data):
    fdiff_struct = make_fracdiff_struct(data)

    for model in MODELS:
        n = Namer(front=model)
        if n('flags') in data.dtype.names:
            calc_color_fracdiff(
                truth=truth,
                data=data,
                model=model,
                fdiff_struct=fdiff_struct,
            )
            calc_flux_fracdiff(
                truth=truth,
                data=data,
                model=model,
                fdiff_struct=fdiff_struct,
            )

    return fdiff_struct


def do_color_fracdiff_plots(*, plt, fdiff_struct):
    plt.set(
        ylim=(-0.05, 0.05),
        xlabel='S/N',
        ylabel=r'$\Delta (r-i)/(r-i)$',
    )
    plt.axhline(0, color='black')

    for model in MODELS:
        n = Namer(front=model)
        if n('color_fracdiff') in fdiff_struct.dtype.names:
            label = r'$\mathrm{%s}$' % model.replace('_', r'\_')

            plt.errorbar(
                fdiff_struct[n('s2n')],
                fdiff_struct[n('color_fracdiff')],
                fdiff_struct[n('color_fracdiff_err')],
                linestyle='-',
                label=label,
            )

    plt.legend()


def do_color_err_fracdiff_plots(*, plt, fdiff_struct):
    plt.set(
        ylim=(-0.3, 0.3),
        xlabel='S/N',
        ylabel=r'$\Delta \sigma_{(r-i)}/\sigma_{(r-i)}$',
    )
    plt.axhline(0, color='black')
    for model in MODELS:

        n = Namer(front=model)
        if n('color_fracdiff') in fdiff_struct.dtype.names:

            print(fdiff_struct[n('color_err_fracdiff')])
            plt.plot(
                fdiff_struct[n('s2n')],
                fdiff_struct[n('color_err_fracdiff')],
                linestyle='-',
                label=r'$\mathrm{%s}$' % model.replace('_', r'\_'),
            )

    plt.legend()


def do_flux_fracdiff_plots(*, plt, fdiff_struct):
    plt.set(
        ylim=(-0.4, 0.4),
        xlabel='S/N',
        ylabel=r'$\Delta \mathrm{mag}/\mathrm{mag}$',
    )
    plt.axhline(0, color='black')

    for model in MODELS:
        n = Namer(front=model)
        if n('flux_fracdiff') in fdiff_struct.dtype.names:
            label = r'$\mathrm{%s}$' % model.replace('_', r'\_')

            plt.errorbar(
                fdiff_struct[n('s2n')],
                fdiff_struct[n('flux_fracdiff')],
                fdiff_struct[n('flux_fracdiff_err')],
                linestyle='-',
                label=label,
            )

    plt.legend()


def do_flux_err_fracdiff_plots(*, plt, fdiff_struct):
    plt.set(
        ylim=(-0.3, 0.3),
        xlabel='S/N',
        ylabel=r'$\Delta \sigma_{\mathrm{mag}}/\sigma_{\mathrm{mag}}$',
    )
    plt.axhline(0, color='black')
    for model in MODELS:

        n = Namer(front=model)
        if n('flux_fracdiff') in fdiff_struct.dtype.names:

            print(fdiff_struct[n('flux_err_fracdiff')])
            plt.plot(
                fdiff_struct[n('s2n')],
                fdiff_struct[n('flux_err_fracdiff')],
                linestyle='-',
                label=r'$\mathrm{%s}$' % model.replace('_', r'\_'),
            )

    plt.legend()


def main():
    args = get_args()

    tab = hickory.Table(
        figsize=(12, 8),
        nrows=2,
        ncols=2,
    )

    fdiff_list = []
    for fname in args.flist:
        print(fname)
        with fitsio.FITS(fname) as fits:
            truth = fits['truth'].read()
            data = fits['model_fits'].read()
            assert np.unique(truth['bands'][0]).size == 2, 'expected 2 bands'

            tfdiff_struct = get_fracdiff(truth=truth, data=data)
            fdiff_list.append(tfdiff_struct)

    if 'gal_type' in truth.dtype.names:
        gal_type = truth['gal_type'][0]
    else:
        gal_type = 'dev'

    tab.suptitle(
        '%s objects, hlr=%g arcsec' % (gal_type, truth['true_hlr'][0])
    )

    fdiff_struct = eu.numpy_util.combine_arrlist(fdiff_list)

    for model in MODELS:
        n = Namer(model)
        if n('s2n') in fdiff_struct.dtype.names:
            s = fdiff_struct[n('s2n')].argsort()
            fdiff_struct = fdiff_struct[s]
            break

    do_color_fracdiff_plots(plt=tab[0, 0], fdiff_struct=fdiff_struct)
    do_color_err_fracdiff_plots(plt=tab[1, 0], fdiff_struct=fdiff_struct)

    do_flux_fracdiff_plots(plt=tab[0, 1], fdiff_struct=fdiff_struct)
    do_flux_err_fracdiff_plots(plt=tab[1, 1], fdiff_struct=fdiff_struct)

    print('writing:', args.output)
    tab.savefig(args.output)


if __name__ == '__main__':
    main()
